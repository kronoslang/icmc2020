{:documentation "Multiplies a vector with a butterfly-optimized Hadamaard matrix"
 :draft-argument "Vector:Cons(1 2 3 4)"
 :identifier "Butterfly"
 :identity "28t8355gx6bc7o1"
 :patch
{:cables
{["37nxgg1t5vi61y2" 0] [:fixed "kejl8eeo4ot41v6" 0]
 ["37nxgg1t5vi61y2" 1] [:fixed "fr96ob0y61m1o9j" 0]
 ["5plkcv29vwefrlb" 0] [:fixed "p2mb3rl0ylahe5j" 0]
 ["cildyx45rf7w0ef" 0] [:fixed "5plkcv29vwefrlb" 1]
 ["jtl3kclekjqgiuk" 0] [:fixed "cildyx45rf7w0ef" 0]
 ["jtl3kclekjqgiuk" 1] [:fixed "ksjisxtlq7d5af3" 0]
 ["kejl8eeo4ot41v6" 0] [:fixed "z1nddd8mh3mo769" 0]
 ["kejl8eeo4ot41v6" 1] [:fixed "jtl3kclekjqgiuk" 0]
 ["ksjisxtlq7d5af3" 0] [:fixed "5plkcv29vwefrlb" 0]
 ["p2mb3rl0ylahe5j" 0] [:fixed "fr96ob0y61m1o9j" 0]
 ["z1nddd8mh3mo769" 0] [:fixed "ksjisxtlq7d5af3" 0]
 ["z1nddd8mh3mo769" 1] [:fixed "cildyx45rf7w0ef" 0]}
 :nodes
{"37nxgg1t5vi61y2" 
{:cable-midpoints 
{1 [36 230]}
 :color 3
 :ephemeral-inputs #{"forms1" "forms2"}
 :inputs ["forms1" "forms2" "forms..."]
 :label "Polymorphic($forms...)"
 :outputs [""]
 :parsed [:fn "Polymorphic" [:tuple [:free-var "forms1"] [:free-var "forms2"] [:free-var "forms..."]]]
 :pos [401 141]}
 "5plkcv29vwefrlb" 
{:inputs ["vector"]
 :label "Vector:Split($vector)"
 :outputs ["" ""]
 :parsed [:fn "Vector:Split" [:tuple [:free-var "vector"]]]
 :pos [-126 -319]}
 "8d3d6gvcaf9fh3" 
{:inputs []
 :label "; # Butterfly Matrix #\n\n\nThis circuit recursively constructs\na matrix multiply operation that makes use\nof the symmetry in a Hadamaard matrix.\n\n\nEach row and column vector has a different combination\nof in-phase and anti-phase components.\n\n\nThe function is polymorphic: the `Vector!` rule constraints\nthe patch downstream to the case when the function argument\nis a vector. This path recurs, splitting up the vector,\nfinally finding the terminating case where the argument is a single scalar.\n\n\nIn that case, the `Vector!` is rejected, and a fallback\nform is used. In this case, the fallback is simply\nthe identity function.\n\n\nThe green `Polymorphic` node collates the alternative paths\nthis circuit can take depending on the aforementioned type rules."
 :outputs []
 :parsed [:comment "# Butterfly Matrix #\n\n\nThis circuit recursively constructs\na matrix multiply operation that makes use\nof the symmetry in a Hadamaard matrix.\n\n\nEach row and column vector has a different combination\nof in-phase and anti-phase components.\n\n\nThe function is polymorphic: the `Vector!` rule constraints\nthe patch downstream to the case when the function argument\nis a vector. This path recurs, splitting up the vector,\nfinally finding the terminating case where the argument is a single scalar.\n\n\nIn that case, the `Vector!` is rejected, and a fallback\nform is used. In this case, the fallback is simply\nthe identity function.\n\n\nThe green `Polymorphic` node collates the alternative paths\nthis circuit can take depending on the aforementioned type rules."]
 :pos [-20 -150]}
 "cildyx45rf7w0ef" 
{:inputs ["vec"]
 :label "Butterfly($vec)"
 :outputs [""]
 :parsed [:fn "Butterfly" [:tuple [:free-var "vec"]]]
 :pos [56 -257]}
 "fr96ob0y61m1o9j" 
{:color 3
 :inputs []
 :label "vec = arg"
 :outputs ["vec"]
 :parsed "arg"
 :pos [-432 -275]}
 "jtl3kclekjqgiuk" 
{:cable-midpoints 
{}
 :inputs ["a" "b" "more..."]
 :label "-"
 :outputs [""]
 :parsed [:infix [:free-var "a"] "-" [:free-var "b"] [:free-var "more..."]]
 :pos [218 -223]}
 "kejl8eeo4ot41v6" 
{:inputs ["a" "b"]
 :label "Vector:Concat($a $b)"
 :outputs [""]
 :parsed [:fn "Vector:Concat" [:tuple [:free-var "a"] [:free-var "b"]]]
 :pos [368 -133]}
 "ksjisxtlq7d5af3" 
{:inputs ["vec"]
 :label "Butterfly($vec)"
 :outputs [""]
 :parsed [:fn "Butterfly" [:tuple [:free-var "vec"]]]
 :pos [64 -351]}
 "p2mb3rl0ylahe5j" 
{:cable-midpoints 
{}
 :color 2
 :inputs ["v"]
 :label "Constraints:Vector!($v)"
 :outputs [""]
 :parsed [:fn "Constraints:Vector!" [:tuple [:free-var "v"]]]
 :pos [-277 -307]}
 "z1nddd8mh3mo769" 
{:cable-midpoints 
{}
 :flip-y true
 :inputs ["a" "b" "more..."]
 :label "+"
 :outputs [""]
 :parsed [:infix [:free-var "a"] "+" [:free-var "b"] [:free-var "more..."]]
 :pos [258 -353]}}
 :scale 1
 :scroll [0 0]}}